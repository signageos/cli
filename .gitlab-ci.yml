variables:
  NODE_VERSION: 20
  IMAGE_VARIANT: alpine-build

image: $ECR_REGISTRY/signageos/docker-node:${NODE_VERSION}-${IMAGE_VARIANT}

stages:
  - prepare
  - test
  - build
  - publish
  - release

cache:
  untracked: true
  key: '$CI_PROJECT_ID'
  paths:
    - node_modules/

before_script:
  - export VERSION=`cat ./VERSION`
  - export TAG=`cat ./PRERELEASE`
  - npx --userconfig ./.npmrc @signageos/lib@latest version-upgrade $VERSION
  - mkdir -p dist
  - npm install

prepare:
  image: $CI_REGISTRY/signageos/docker:master
  stage: prepare
  before_script: []
  script:
    - ci-prepare
  artifacts:
    when: on_success
    paths:
      - ./VERSION
      - ./PRERELEASE

.windows_before_script: &windows_before_script
  before_script:
    - $VERSION = Get-Content VERSION | Out-String
    - $VERSION = $VERSION.Trim()
    # Download the correct x64 installer
    - Invoke-WebRequest -Uri "https://nodejs.org/dist/v20.19.0/node-v20.19.0-x64.msi" -OutFile "node-x64.msi"
    # Install Node.js with proper arguments format
    - Start-Process msiexec.exe -Wait -ArgumentList "/i","node-x64.msi","/norestart","ADDLOCAL=ALL" # "/quiet",
    # Update PATH and create a fresh PowerShell session to recognize the new PATH
    - $env:PATH = "C:\Program Files\nodejs;$env:PATH"
    # Output current versions to verify installation
    - node --version
    - npm --version
    - npm ci --cache npm-cache --prefer-offline --ignore-scripts
    - npm i @signageos/lib --ignore-scripts --cache npm-cache --prefer-offline
    - npm i @signageos/file --cache npm-cache --prefer-offline
    - npx --userconfig ./.npmrc @signageos/lib@latest version-upgrade $VERSION

windows-prepare:
  image: $CI_REGISTRY/signageos/docker:master
  stage: prepare
  before_script: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always
  script:
    - export NPM_AWS_DOMAIN='signageos'
    - export NPM_AWS_DOMAIN_OWNER=524256255273
    - export NPM_AWS_NAME='private'
    - export NPM_AWS_HOST=signageos-${NPM_AWS_DOMAIN_OWNER}.d.codeartifact.eu-central-1.amazonaws.com/npm/${NPM_AWS_NAME}
    - export NPM_AWS_URL="https://${NPM_AWS_HOST}/"
    - export NPM_AWS_TOKEN=$(aws codeartifact get-authorization-token --domain ${NPM_AWS_DOMAIN} --domain-owner ${NPM_AWS_DOMAIN_OWNER} --query authorizationToken --output text)
    - echo "NPM_REGISTRY_HOST=$NPM_AWS_HOST" >> build.env
    - echo "NPM_REGISTRY_URL=$NPM_AWS_URL" >> build.env
    - echo "NPM_AUTH_TOKEN=$NPM_AWS_TOKEN" >> build.env
    - ci-prepare
  artifacts:
    when: on_success
    paths:
      - ./VERSION
      - ./PRERELEASE
    reports:
      dotenv:
       - build.env

test:general:windows:
  <<: *windows_before_script
  image: docker:24.0.9-windowsservercore-1809
  needs:
    - windows-prepare
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: manual
  stage: test
  tags:
    - windows
  script:
    - Copy-Item .env.amy .env
    - npm install
    - $env:NPM_REGISTRY_URL = "https://registry.npmjs.org/"
    - $env:NPM_REGISTRY_HOST = "registry.npmjs.org"
    - npm run test:windows

test:general:
  stage: test
  except:
    - tags
  needs:
    - prepare
  artifacts:
    expire_in: 1 week
    name: tests-coverage
    when: always
    paths:
      - coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  script:
    - cp .env.amy .env
    - npm install
    - npm run test:coverage

test:lint:
  stage: test
  except:
    - tags
  needs:
    - prepare
  script:
    - if [ `find test -name '*\.ts' -type f -print0 | xargs -0 grep "\.only" | wc -l` -gt 0 ]; then echo "You forgot the .only in tests" &&
      exit 1; fi
    - npm run lint

test:changelog:
  image: $CI_REGISTRY/signageos/docker:master
  stage: test
  except:
    - tags
  needs:
    - prepare
  allow_failure: true
  script:
    - ci-test-changelog

test:check:
  stage: test
  except:
    - tags
  needs:
    - prepare
  script:
    - npm run check

build:
  stage: build
  dependencies:
    - prepare
  needs:
    - prepare
  script:
    - npm run clean-build --production
  artifacts:
    when: on_success
    paths:
      - dist/

publish:npm:
  stage: publish
  dependencies:
    - prepare
    - build
  needs:
    - prepare
    - build
  script:
    - cp .env.production .env
    - npm publish --tag $TAG

publish:npm-public:
  stage: publish
  only:
    - tags
  dependencies:
    - prepare
    - build
  needs:
    - prepare
    - build
  script:
    - cp .env.production .env
    - export NPM_REGISTRY_URL=https://registry.npmjs.org/
    - export NPM_REGISTRY_HOST=registry.npmjs.org
    - export NPM_AUTH_TOKEN=$PUBLIC_NPM_AUTH_TOKEN
    - tools/prepare-npm-public.sh
    - npm publish --tag $TAG

release:tag:
  image: $CI_REGISTRY/signageos/docker:master
  stage: release
  only:
    - master
  needs:
    - prepare
    - build
    - test:general
    - test:lint
    - test:check
    - test:changelog
  when: manual
  allow_failure: false
  before_script: []
  script:
    - ci-release-tag

release:notes:
  image: $CI_REGISTRY/signageos/docker:master
  stage: release
  only:
    - tags
  needs:
    - prepare
    - publish:npm
  script:
    - ci-release-notes
